# Note: this file is generated by chatGPT and needs testing. 
import sys
from pathlib import Path

# Add parent directory to path so we can import config
sys.path.insert(0, str(Path(__file__).parent.parent))

import requests
from config import facebook as facebook_config

APP_ID = facebook_config.app_id
APP_SECRET = facebook_config.app_secret
LONG_LIVED_USER_TOKEN = facebook_config.access_token

def get_new_long_lived_user_token():
    url = f"https://graph.facebook.com/v19.0/oauth/access_token"
    params = {
        'grant_type': 'fb_exchange_token',
        'client_id': APP_ID,
        'client_secret': APP_SECRET,
        'fb_exchange_token': LONG_LIVED_USER_TOKEN
    }
    response = requests.get(url, params=params)
    response.raise_for_status()
    data = response.json()
    new_user_token = data['access_token']
    print(f"‚úÖ New long-lived user token: {new_user_token}")
    return new_user_token

def get_page_access_token(user_token):
    url = f"https://graph.facebook.com/v19.0/me/accounts"
    params = {
        'access_token': user_token
    }
    response = requests.get(url, params=params)
    
    # Check for errors and print details
    if response.status_code != 200:
        try:
            error_data = response.json()
            if 'error' in error_data:
                error_message = error_data['error'].get('message', '')
                # Check if this is a Page token (not a User token)
                if 'node type (Page)' in error_message:
                    return {'is_page_token': True}
                
                # For other errors, print details
                print(f"‚ùå Error: {response.status_code}")
                print(f"‚ùå Facebook API Error: {error_data}")
                print(f"   Message: {error_message}")
                print(f"   Type: {error_data['error'].get('type', 'Unknown')}")
                print(f"   Code: {error_data['error'].get('code', 'Unknown')}")
        except:
            print(f"‚ùå Response: {response.text}")
        response.raise_for_status()
    
    data = response.json()
    if 'data' not in data or len(data['data']) == 0:
        print("‚ö†Ô∏è  No pages found. Make sure your token has 'pages_show_list' and 'pages_read_engagement' permissions.")
        return data
    
    for page in data['data']:
        print(f"‚úÖ Page: {page['name']}")
        print(f"‚û° Page ID: {page['id']}")
        print(f"‚û° Page Access Token: {page['access_token']}")
    return data

if __name__ == "__main__":
    print("\n" + "="*60)
    print("Facebook Token Renewal Script")
    print("="*60 + "\n")
    
    # Try to renew the token
    new_token = get_new_long_lived_user_token()
    
    print("\n" + "="*60)
    print("Checking token type...")
    print("="*60 + "\n")
    
    # Check if it's a User token or Page token
    result = get_page_access_token(new_token)
    
    if result and result.get('is_page_token'):
        print("‚úÖ The token is a Page Access Token (not a User token).")
        print("‚úÖ You can use this renewed token directly in your config.yaml")
        print(f"\nüìã Update your config.yaml with this Page token:")
        print(f"   access_token: {new_token}")
        print("\nüí° Note: Page tokens are what you need for posting to Facebook pages.")
        print("   This token should be valid for about 60 days.")
